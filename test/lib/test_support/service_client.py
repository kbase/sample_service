import uuid

import requests
from test_support.constants import SAMPLE_SERVICE_URL

DEFAULT_URL = SAMPLE_SERVICE_URL


class ServiceClient:
    """Represents a network api to a KBase JSON-RPC 1.1 service suitable for test usage

    This class should be used for calls to KBase services which use the JSON-RPC 1.1 protocol,
    which includes most legacy services like Workspace, Catalog, etc.

    It is specialized for test usage, as it includes debug printing, and assertion of basic
    structure and expected results for success (result) and error conditions.

    Attributes
    ----------
    module_name: str
        The module name for the service
    url: str
        The url to the service
    token: str or None
            The KBase auth token to use for requests; optional, omitting or specifying None
            indicates an unauthenticated request.
    """

    def __init__(self, module_name, url=DEFAULT_URL, token=None):
        """
        Parameters
        ----------
        module_name: str
            The module name for the service
        url: str
            The url to the service, including the path; default defined at top of file
        token: str or None
            The KBase auth token to use for requests; optional, omitting or specifying None
            indicates an unauthenticated request.
        """
        self.module_name = module_name
        self.token = token
        self.url = url

    def make_rpc(self, function_name, params):
        """Create an RPC JSON data structure"""
        return {
            "method": f"{self.module_name}.{function_name}",
            "version": "1.1",
            "id": str(uuid.uuid4()),
            "params": [params],
        }

    def make_headers(self, token):
        """Convenience method to create the request headers"""
        headers = {"accept": "application/json"}
        if self.token is not None:
            headers["authorization"] = token
        return headers

    def call(self, function_name, params, token=None, debug=False):
        """Calls a method in the service"""
        response = requests.post(
            self.url,
            headers=self.make_headers(token or self.token),
            json=self.make_rpc(function_name, params),
        )
        if debug:
            print("[Service.call]", params, response.text)

        return response

    def call_assert_result(self, function_name, params, token=None, debug=False):
        """Calls a method in the service, and tests basic assertions about a result value

        Note that it does not actually test any assertions about the result data"""
        response = self.call(function_name, params, token, debug)

        assert response.ok is True

        payload = response.json()
        assert "result" in payload
        result = payload["result"]

        # The result may be either null or an array of one element
        # containing the result data.
        if result is None:
            return result

        assert type(result) is list

        # Although not required by JSON-RPC 1.1, nor by KBase services, it is standard practice,
        # and the default behavior for services generated by kb_sdk, to have only a single
        # value in the result array.
        assert len(result) == 1
        # TODO: should we check other standard bits of a standard JSON-RPC result?
        return result[0]

    def call_assert_error(self, function_name, params, token=None, debug=False):
        """Calls a method in the service which is expected to result in an error

        Note that it does not actually test any assertions about the error data"""
        response = self.call(function_name, params, token, debug)

        # Although not required by JSON-RPC 1.1, and frowned upon by JSON-RPC in general,
        # KBase services (as managed by the standard service class) always set the status code
        # to 500 (internal server error) if a JSON-RPC error is returned.
        assert response.status_code == 500

        payload = response.json()
        assert "error" in payload
        # TODO: should we check other standard bits of a JSON-RPC 1.1 and
        # KBase service error result?
        return payload["error"]
