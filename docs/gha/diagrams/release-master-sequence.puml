@startuml

actor Developer
box GitHub #LightBlue
participant "GitHub UI" as GH
participant "Controlling Workflow\nrelease-master.yml" as Workflow
participant "Reusable Test Workflow\nreusable_test-python.yml" as TestWorkflow
participant "Reusable Build/Push Workflow\nreusable_build-push.yml" as BuildPushWorkflow
end box
box "GitHub Container Registry" #LightYellow
participant GHCR
end box
participant CodeCov

title Release from ""master""

== Invoke ==
Developer -> GH: Create Release ""#.#.#""\n against ""master""
GH -> GH: emits event\n ""release"" ""published""
GH -[#blue]> Workflow: Runs\n if event matches
activate Workflow

Workflow -[#blue]> TestWorkflow: Runs

== Test ==
activate TestWorkflow
TestWorkflow -[#red]> Workflow : if any test fails\n exit with error
Workflow -[#red]> GH: if exit with error\n terminate workflow
GH -[#red]> Developer: show error
TestWorkflow -> CodeCov: sends coverage
TestWorkflow -[#green]> Workflow: success
deactivate TestWorkflow

Workflow -[#blue]> BuildPushWorkflow: Runs\n input: name, tag

== Build and Push ==
activate BuildPushWorkflow
BuildPushWorkflow -> BuildPushWorkflow: build image
BuildPushWorkflow -[#red]> Workflow: if build fails\n exit with error
Workflow -[#red]> GH: if exit with error\n terminate workflow
GH -[#red]> Developer: show error

BuildPushWorkflow -> GHCR: Login\n GHCR_USERNAME\n GHCR_TOKEN
BuildPushWorkflow -[#red]> Workflow: if login fails\n exit with error
Workflow -[#red]> GH: if exit with error\n terminate workflow
GH -[#red]> Developer: show error

BuildPushWorkflow -> GHCR: push image\n name: ""sample_service""\n tags: ""#.#.#"", ""latest""
BuildPushWorkflow -[#green]> Workflow:success
deactivate BuildPushWorkflow

Workflow -[#green]> GH:success

deactivate Workflow
GH -[#green]> Developer: show success

@enduml